<Type Name="DDRUMConfiguration" FullName="Datadog.iOS.ObjC.DDRUMConfiguration">
  <TypeSignature Language="C#" Value="public class DDRUMConfiguration : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DDRUMConfiguration extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>objc</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("_TtC11DatadogObjc18DDRUMConfiguration", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.Nullable(0)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.NullableContext(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>RUM feature configuration.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DDRUMConfiguration (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">
        </param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal DDRUMConfiguration (ObjCRuntime.NativeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(valuetype ObjCRuntime.NativeHandle handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="ObjCRuntime.NativeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DDRUMConfiguration (string applicationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string applicationId) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithApplicationID:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="applicationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="applicationId">
          <see cref="ApplicationId" />
        </param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppHangThreshold">
      <MemberSignature Language="C#" Value="public virtual double AppHangThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 AppHangThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("appHangThreshold")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAppHangThreshold:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables App Hangs monitoring with the given threshold (in seconds).</summary>
        <value>
        </value>
        <remarks>
          <para>
            Only App Hangs that last more than this threshold will be reported. The minimal allowed value for this option is <c>0.1</c> seconds.
            To disable hangs monitoring, set this parameter to <c>nil</c>.
          </para>
          <para>
            Note: Be cautious when setting the threshold to very small values, as it may lead to excessive reporting of hangs.
            The SDK implements a secondary thread for monitoring App Hangs. To reduce CPU utilization, it tracks hangs with a tolerance of 2.5%, meaning that
            some hangs lasting very close to this threshold may not be reported.
          </para>
          <para>
            Note: App Hangs monitoring requires Datadog Crash Reporting to be enabled. Otherwise stack trace will be not reported in App Hang errors.
          </para>
          <para>Default: <c>0.0</c> (hangs monitoring disabled).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationId">
      <MemberSignature Language="C#" Value="public virtual string ApplicationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("applicationID")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An unique identifier of the RUM application in Datadog.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override ObjCRuntime.NativeHandle ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ObjCRuntime.NativeHandle ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.NativeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomEndpoint">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl CustomEndpoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl CustomEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Nullable(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("customEndpoint", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.NullableContext(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCustomEndpoint:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.CompilerServices.NullableContext(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          Custom server URL for sending RUM data.
        </summary>
        <value>
        </value>
        <remarks>
          <para>
            Default: <c>null</c>.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LongTaskThreshold">
      <MemberSignature Language="C#" Value="public virtual double LongTaskThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LongTaskThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("longTaskThreshold")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLongTaskThreshold:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables RUM long tasks tracking with the given threshold (in seconds).</summary>
        <value>
        </value>
        <remarks>
          <para>
            Any operation on the main thread that exceeds this threshold will be reported as a RUM long task.
            To disable RUM long tasks tracking, set <c>null</c> or <c>0</c>.
          </para>
          <para>Default: <c>0.1</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSessionStart">
      <MemberSignature Language="C#" Value="public virtual Action&lt;Foundation.NSString,bool&gt; OnSessionStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`2&lt;class Foundation.NSString, bool&gt; OnSessionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("onSessionStart", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setOnSessionStart:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;Foundation.NSString,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          RUM session start callback.
        </summary>
        <value>
        </value>
        <remarks>
          <para>
            It takes 2 arguments:
            - Newly started session ID.
            - Flag indicating whether or not the session was discarded due to the sampling rate.
          </para>
          <para>
            Keep the implementation fast and do not make any assumptions on the thread that runs this callback.
          </para>
          <para>Default: <c>null</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionSampleRate">
      <MemberSignature Language="C#" Value="public virtual float SessionSampleRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SessionSampleRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("sessionSampleRate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSessionSampleRate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The sampling rate for RUM sessions.</summary>
        <value>
        </value>
        <remarks>
          <para>
          It must be a number between 0.0 and 100.0, where 0 means no sessions will be sent
          and 100 means all will be uploaded.
        </para>
          <para>Default: <c>100.0</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActionEventMapper">
      <MemberSignature Language="C#" Value="public virtual void SetActionEventMapper (Func&lt;Datadog.iOS.ObjC.DDRUMActionEvent,Datadog.iOS.ObjC.DDRUMActionEvent&gt; mapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetActionEventMapper(class System.Func`2&lt;class Datadog.iOS.ObjC.DDRUMActionEvent, class Datadog.iOS.ObjC.DDRUMActionEvent&gt; mapper) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setActionEventMapper:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapper" Type="System.Func&lt;Datadog.iOS.ObjC.DDRUMActionEvent,Datadog.iOS.ObjC.DDRUMActionEvent&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDFuncArity2V1))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mapper">
        </param>
        <summary>
          Sets a custom mapper for RUM action events.
        </summary>
        <remarks>
          <para>
            It can be used to modify action events before they are sent. The implementation of the mapper should
            obtain a mutable copy of <see cref="DDRUMActionEvent" />, modify it, and return it. Returning <c>null</c> will drop the event.
            Keep the implementation fast and do not make any assumptions on the thread used to run it.
          </para>
          <para>Default: <c>null</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetErrorEventMapper">
      <MemberSignature Language="C#" Value="public virtual void SetErrorEventMapper (Func&lt;Datadog.iOS.ObjC.DDRUMErrorEvent,Datadog.iOS.ObjC.DDRUMErrorEvent&gt; mapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetErrorEventMapper(class System.Func`2&lt;class Datadog.iOS.ObjC.DDRUMErrorEvent, class Datadog.iOS.ObjC.DDRUMErrorEvent&gt; mapper) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setErrorEventMapper:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapper" Type="System.Func&lt;Datadog.iOS.ObjC.DDRUMErrorEvent,Datadog.iOS.ObjC.DDRUMErrorEvent&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDFuncArity2V2))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mapper">
        </param>
        <summary>
          Sets a custom mapper for RUM error events.
        </summary>
        <remarks>
          <para>
            It can be used to modify error events before they are sent. The implementation of the mapper should
            obtain a mutable copy of <see cref="DDRUMErrorEvent" />, modify it, and return it. Returning <c>null</c> will drop the event.
            Keep the implementation fast and do not make any assumptions on the thread used to run it.
          </para>
          <para>Default: <c>null</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLongTaskEventMapper">
      <MemberSignature Language="C#" Value="public virtual void SetLongTaskEventMapper (Func&lt;Datadog.iOS.ObjC.DDRUMLongTaskEvent,Datadog.iOS.ObjC.DDRUMLongTaskEvent&gt; mapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLongTaskEventMapper(class System.Func`2&lt;class Datadog.iOS.ObjC.DDRUMLongTaskEvent, class Datadog.iOS.ObjC.DDRUMLongTaskEvent&gt; mapper) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setLongTaskEventMapper:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapper" Type="System.Func&lt;Datadog.iOS.ObjC.DDRUMLongTaskEvent,Datadog.iOS.ObjC.DDRUMLongTaskEvent&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDFuncArity2V3))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mapper">
        </param>
        <summary>
          Sets a custom mapper for RUM long task events.
        </summary>
        <remarks>
          <para>
            It can be used to modify long task events before they are sent. The implementation of the mapper should
            obtain a mutable copy of <see cref="DDRUMLongTaskEvent" />, modify it, and return it. Returning <c>null</c> will drop the event.
            Keep the implementation fast and do not make any assumptions on the thread used to run it.
          </para>
          <para>Default: <c>null</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetResourceEventMapper">
      <MemberSignature Language="C#" Value="public virtual void SetResourceEventMapper (Func&lt;Datadog.iOS.ObjC.DDRUMResourceEvent,Datadog.iOS.ObjC.DDRUMResourceEvent&gt; mapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetResourceEventMapper(class System.Func`2&lt;class Datadog.iOS.ObjC.DDRUMResourceEvent, class Datadog.iOS.ObjC.DDRUMResourceEvent&gt; mapper) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setResourceEventMapper:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapper" Type="System.Func&lt;Datadog.iOS.ObjC.DDRUMResourceEvent,Datadog.iOS.ObjC.DDRUMResourceEvent&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDFuncArity2V4))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mapper">
        </param>
        <summary>Custom mapper for RUM resource events.</summary>
        <remarks>
          <para>
            It can be used to modify resource events before they are sent. The implementation of the mapper should
            obtain a mutable copy of <see cref="DDRUMResourceEvent" />, modify it, and return it. Returning <c>null</c> will drop the event.
            Keep the implementation fast and do not make any assumptions on the thread used to run it.
          </para>
          <para>Default: <c>null</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetURLSessionTracking">
      <MemberSignature Language="C#" Value="public virtual void SetURLSessionTracking (Datadog.iOS.ObjC.DDRUMURLSessionTracking tracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetURLSessionTracking(class Datadog.iOS.ObjC.DDRUMURLSessionTracking tracking) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setURLSessionTracking:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tracking" Type="Datadog.iOS.ObjC.DDRUMURLSessionTracking" />
      </Parameters>
      <Docs>
        <param name="tracking">
        </param>
        <summary>The configuration for automatic RUM resources tracking.</summary>
        <remarks>
          <para>
              RUM resources tracking requires enabling <see cref="DDURLSessionInstrumentation" />. See <see cref="URLSessionInstrumentation.Enable()" />.
           </para>
          <para>
              Default: <c>null</c> - which means automatic RUM resource tracking is not enabled by default.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetViewEventMapper">
      <MemberSignature Language="C#" Value="public virtual void SetViewEventMapper (Func&lt;Datadog.iOS.ObjC.DDRUMViewEvent,Datadog.iOS.ObjC.DDRUMViewEvent&gt; mapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetViewEventMapper(class System.Func`2&lt;class Datadog.iOS.ObjC.DDRUMViewEvent, class Datadog.iOS.ObjC.DDRUMViewEvent&gt; mapper) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setViewEventMapper:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapper" Type="System.Func&lt;Datadog.iOS.ObjC.DDRUMViewEvent,Datadog.iOS.ObjC.DDRUMViewEvent&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDFuncArity2V5))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mapper">
        </param>
        <summary>Sets a custom mapper for RUM view events.</summary>
        <remarks>
          <para>
            It can be used to modify view events before they are sent. The implementation of the mapper should
            obtain a mutable copy of <see cref="DDRUMViewEvent" />, modify it, and return it. Keep the implementation fast
            and do not make any assumptions on the thread used to run it.
          </para>
          <para>
            Note: This mapper ensures that all views are sent by preventing the return of <c>null</c>. To drop certain automatically
            collected RUM views, adjust the implementation of the view predicate (see the <see cref="UIKitViewsPredicate" /> option).
          </para>
          <para>Default: <c>null</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TelemetrySampleRate">
      <MemberSignature Language="C#" Value="public virtual float TelemetrySampleRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 TelemetrySampleRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("telemetrySampleRate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTelemetrySampleRate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The sampling rate for SDK internal telemetry utilized by Datadog.</summary>
        <value>
        </value>
        <remarks>
          <para>This telemetry is used to monitor the internal workings of the entire Datadog iOS SDK.</para>
          <para>It must be a number between 0.0 and 100.0, where 0 means no telemetry will be sent, and 100 means all will be uploaded.</para>
          <para>The default value is 20.0.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackAnonymousUser">
      <MemberSignature Language="C#" Value="public virtual bool TrackAnonymousUser { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrackAnonymousUser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("trackAnonymousUser")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTrackAnonymousUser:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Enables collection of anonymous user id across sessions.</para>
          <para>When enabled, the SDK generates a unique, non-personal anonymous user ID that is persisted across
            app launches. This ID will be attached to each RUM Session, allowing you to link sessions
            originating from the same user/device without collecting personal data.</para>
        </summary>
        <value>
          Default: <c>true</c>.
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackBackgroundEvents">
      <MemberSignature Language="C#" Value="public virtual bool TrackBackgroundEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrackBackgroundEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("trackBackgroundEvents")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTrackBackgroundEvents:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether RUM events should be tracked when no view is active (including when the app is in the background).</summary>
        <value>
        </value>
        <remarks>
          <para>
            If enabled, RUM will attach events to an automatically created "background" view.
          </para>
          <para>
            Note: Enabling this option may increase the number of sessions tracked and result in higher billing.
          </para>
          <para>Default: <c>false</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackFrustrations">
      <MemberSignature Language="C#" Value="public virtual bool TrackFrustrations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrackFrustrations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("trackFrustrations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTrackFrustrations:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether automatic tracking of user frustrations should be enabled.</summary>
        <value>
        </value>
        <remarks>
          <para>RUM detects "error taps"  when an error follows a RUM tap action.</para>
          <para>Default: <c>true</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackWatchdogTerminations">
      <MemberSignature Language="C#" Value="public virtual bool TrackWatchdogTerminations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrackWatchdogTerminations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("trackWatchdogTerminations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTrackWatchdogTerminations:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether the SDK should track application termination by the watchdog.</summary>
        <value>
        </value>
        <remarks>
          <para>
           Read more about watchdog terminations at https://developer.apple.com/documentation/xcode/addressing-watchdog-terminations
          </para>
          <para>Default: <c>false</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UIKitActionsPredicate">
      <MemberSignature Language="C#" Value="public virtual Datadog.iOS.ObjC.IDDUIKitRUMActionsPredicate UIKitActionsPredicate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Datadog.iOS.ObjC.IDDUIKitRUMActionsPredicate UIKitActionsPredicate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Nullable(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("uiKitActionsPredicate", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.NullableContext(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setUiKitActionsPredicate:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.CompilerServices.NullableContext(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Datadog.iOS.ObjC.IDDUIKitRUMActionsPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The predicate for automatically tracking <see cref="UITouch" /> events as RUM actions.</summary>
        <value>
        </value>
        <remarks>
          <para>
            RUM will query this predicate for each <see cref="UIView" /> that the user interacts with. The predicate implementation
            should return RUM action parameters if the given interaction should be accepted, or <c>null</c> to ignore it.
            Touch events on the keyboard are ignored for privacy reasons.
          </para>
          <para>
            You can use <see cref="DDDefaultUIKitRUMActionsPredicate" /> or create your own predicate by
            implementing <see cref="IDDUIKitRUMActionsPredicate" />.
          </para>
          <para>
            Note: Automatic RUM action tracking involves swizzling the <c>UIApplication.SendEvent()</c> method.
          </para>
          <para>Default: <c>null</c> - which means automatic RUM action tracking is not enabled by default.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UIKitViewsPredicate">
      <MemberSignature Language="C#" Value="public virtual Datadog.iOS.ObjC.IDDUIKitRUMViewsPredicate UIKitViewsPredicate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Datadog.iOS.ObjC.IDDUIKitRUMViewsPredicate UIKitViewsPredicate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Nullable(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("uiKitViewsPredicate", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.NullableContext(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setUiKitViewsPredicate:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.CompilerServices.NullableContext(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Datadog.iOS.ObjC.IDDUIKitRUMViewsPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The predicate for automatically tracking <c>UIViewControllers</c> as RUM views.</summary>
        <value>
        </value>
        <remarks>
          <para>
          RUM will query this predicate for each <c>UIViewController</c> presented in the app. The predicate implementation
          should return RUM view parameters if the given controller should start a view, or <c>null</c> to ignore it.
        </para>
          <para>
          You can use <see cref="Datadog.iOS.DDDefaultUIKitRUMViewsPredicate" /> 
          or create your own predicate by implementing <see cref="Datadog.iOS.IDDUIKitRUMViewsPredicate" />.
        </para>
          <para>
          Note: Automatic RUM views tracking involves swizzling the <c>UIViewController</c> lifecycle methods.
        </para>
          <para>Default: <c>null</c> - which means automatic RUM view tracking is not enabled by default.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VitalsUpdateFrequency">
      <MemberSignature Language="C#" Value="public virtual Datadog.iOS.ObjC.DDRUMVitalsFrequency VitalsUpdateFrequency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Datadog.iOS.ObjC.DDRUMVitalsFrequency VitalsUpdateFrequency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("vitalsUpdateFrequency", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setVitalsUpdateFrequency:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Datadog.iOS.ObjC.DDRUMVitalsFrequency</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the preferred frequency for collecting RUM vitals.</summary>
        <value>
        </value>
        <remarks>
          <para>To disable RUM vitals monitoring, set <c>null</c>.</para>
          <para>Default: <c>Average</c>.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
